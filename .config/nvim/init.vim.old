""""""""""""""""""""""""""""""""
""" Andres Castro Vim Config """
""""""""""""""""""""""""""""""""

filetype off                  " required
set nocompatible
syntax on
set wrap
set encoding=utf8
set relativenumber
set number
set hlsearch
set incsearch
:highlight LineNr ctermfg=grey
set tabstop=4 shiftwidth=4 expandtab 
autocmd BufRead,BufNewFile *.blade.php set filetype=blade
filetype plugin on
set omnifunc=syntaxcomplete#Complete
set belloff=all

 
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
 
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
call vundle#end()            " required
filetype plugin indent on    " required

Plugin 'scrooloose/nerdtree'

Plugin 'vim-airline/vim-airline'

"Plugin 'vim-airline/vim-airline-themes'

Plugin 'severin-lemaignan/vim-minimap'

Plugin 'tpope/vim-surround'

"Plugin 'Valloric/MatchTagAlways'

Plugin 'vim-scripts/RltvNmbr.vim'

Plugin 'jiangmiao/auto-pairs'

"Plugin 'altercation/vim-colors-solarized'

Plugin 'arcticicestudio/nord-vim'

Plugin 'mhinz/vim-signify'

Plugin 'airblade/vim-gitgutter'

Plugin 'tpope/vim-fugitive'

Plugin 'jwilm/i3-vim-focus'

Plugin 'alvan/vim-closetag'

Plugin 'ctrlpvim/ctrlp.vim'

"Plugin 'scrooloose/syntastic'

Plugin 'jalvesaq/Nvim-R'

Plugin 'chrisbra/csv.vim'

"Plugin 'valloric/youcompleteme'

Plugin 'majutsushi/tagbar'

Plugin 'honza/vim-snippets'

Plugin 'MarcWeber/vim-addon-mw-utils'

Plugin 'tomtom/tlib_vim'

Plugin 'garbas/vim-snipmate'

Plugin 'jimf/vim-pep8-text-width'

Plugin 'francoiscabrol/ranger.vim'

"Plugin 'vim-vdebug/vdebug'

Plugin 'grep.vim'

Plugin 'jwalton512/vim-blade'

Plugin 'OrangeT/vim-csharp'

Plugin 'stephpy/vim-php-cs-fixer'

Plugin 'powerline/powerline'

Plugin 'yggdroot/indentline'

Plugin 'stanangeloff/php.vim'

Plugin 'hashivim/vim-terraform'

Plugin 'juliosueiras/vim-terraform-completion'

Plugin 'ekalinin/dockerfile.vim'

Plugin 'stephpy/vim-yaml'

Plugin 'dbakker/vim-projectroot'

Plugin 'fatih/vim-go'

Plugin 'ryanoasis/vim-devicons'

Plugin 'tiagofumo/vim-nerdtree-syntax-highlight'

Plugin 'nvim-lua/plenary.nvim'
Plugin 'nvim-telescope/telescope.nvim'

Plugin 'frazrepo/vim-rainbow'

Plugin 'camspiers/animate.vim'
"Plugin 'camspiers/lens.vim'

Plugin 'ahmedkhalf/project.nvim'
Plugin 'nvim-telescope/telescope-project.nvim'

Plugin 'towolf/vim-helm'

Plugin 'christoomey/vim-tmux-navigator'

Plugin 'neoclide/coc.nvim'

Plugin 'dense-analysis/ale'

"maps NERDTree
map <Tab> :NERDTreeToggle<CR>

"Colors Solarized Dark
syntax enable
set background=dark
colorscheme nord

"vim-airline
"let g:airline_solarized_bg='dark'
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts=1
let g:Powerline_symbols='unicode'
let g:powerline_pycmd = 'py3'
set  rtp+=/usr/local/lib/python2.7/dist-packages/powerline/bindings/vim/
set laststatus=2
set t_Co=256
"set term=xterm-kitty

"set moving between windows to ctrl+arrows
nnoremap <silent> <C-Right> <c-w>l
nnoremap <silent> <C-Left> <c-w>h
nnoremap <silent> <C-Up> <c-w>k
nnoremap <silent> <C-Down> <c-w>j

" set moving between windows to ctrl+hjkl
noremap <silent> <C-l> <c-w>l
noremap <silent> <C-h> <c-w>h
noremap <silent> <C-k> <c-w>k
noremap <silent> <C-j> <c-w>j

"Macros para moonlander
map <S-Tab> :Ranger<CR>
map <S-t> :RangerNewTab<CR>

"syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
let g:syntastic_php_phpcs_args='--standard=PSR2'

"snipmate
let g:snipMate = { 'snippet_version' : 1 }

"Tagbar
nmap <F8> :TagbarToggle<CR>

" PROJECTROOT
"let g:rootmarkers = ['.projectroot', 'docker-compose.yml', '.git', '.hg', '.svn', '.bzr','_darcs','build.xml']
let g:rootmarkers = ['.projectroot', '.git']

"open horizontal windows dow
:set splitbelow

"open vertical windows rigth
:set splitright

let g:php_cs_fixer_rules = "@PSR2"
autocmd BufWritePost *.php silent! call PhpCsFixerFixFile()

"terraform
let g:terraform_align=1
let g:terraform_fold_sections=0
let g:terraform_fmt_on_save=1

let g:ctrlp_working_path_mode=0

"Rainbow brackets
let g:rainbow_active = 1

"Telescope
" Find files using Telescope command-line sugar.
nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>

" Using Lua functions
nnoremap <leader>ff <cmd>lua require('telescope.builtin').find_files()<cr>
nnoremap <leader>fg <cmd>lua require('telescope.builtin').live_grep()<cr>
nnoremap <leader>fb <cmd>lua require('telescope.builtin').buffers()<cr>
nnoremap <leader>fh <cmd>lua require('telescope.builtin').help_tags()<cr>

au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)

"Terminal
noremap <leader>tv :botright vnew <Bar> :terminal<cr>
noremap <leader>th :botright new <Bar> :terminal<cr>

inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"

"ALE
let g:ale_completion_enabled = 0
let b:ale_fixers = ['prettier', 'eslint']
let g:ale_fix_on_save = 1
let g:ale_floating_preview = 1
let g:ale_floating_window_border = []
let g:ale_hover_to_floating_preview = 1
let g:ale_detail_to_floating_preview = 1

"COC
let b:coc_diagnostic_disable=1
